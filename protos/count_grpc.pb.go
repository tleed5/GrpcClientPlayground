// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protos/count.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CounterClient is the client API for Counter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CounterClient interface {
	// Increment count by 1
	IncrementCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CounterReply, error)
	// Increment count through client stream of multiple counts
	AccumulateCount(ctx context.Context, opts ...grpc.CallOption) (Counter_AccumulateCountClient, error)
	// Countdown with server stream
	Countdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Counter_CountdownClient, error)
	CountAndRespond(ctx context.Context, opts ...grpc.CallOption) (Counter_CountAndRespondClient, error)
}

type counterClient struct {
	cc grpc.ClientConnInterface
}

func NewCounterClient(cc grpc.ClientConnInterface) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) IncrementCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CounterReply, error) {
	out := new(CounterReply)
	err := c.cc.Invoke(ctx, "/Counter/IncrementCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *counterClient) AccumulateCount(ctx context.Context, opts ...grpc.CallOption) (Counter_AccumulateCountClient, error) {
	stream, err := c.cc.NewStream(ctx, &Counter_ServiceDesc.Streams[0], "/Counter/AccumulateCount", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterAccumulateCountClient{stream}
	return x, nil
}

type Counter_AccumulateCountClient interface {
	Send(*CounterRequest) error
	CloseAndRecv() (*CounterReply, error)
	grpc.ClientStream
}

type counterAccumulateCountClient struct {
	grpc.ClientStream
}

func (x *counterAccumulateCountClient) Send(m *CounterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *counterAccumulateCountClient) CloseAndRecv() (*CounterReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CounterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *counterClient) Countdown(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Counter_CountdownClient, error) {
	stream, err := c.cc.NewStream(ctx, &Counter_ServiceDesc.Streams[1], "/Counter/Countdown", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterCountdownClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Counter_CountdownClient interface {
	Recv() (*CounterReply, error)
	grpc.ClientStream
}

type counterCountdownClient struct {
	grpc.ClientStream
}

func (x *counterCountdownClient) Recv() (*CounterReply, error) {
	m := new(CounterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *counterClient) CountAndRespond(ctx context.Context, opts ...grpc.CallOption) (Counter_CountAndRespondClient, error) {
	stream, err := c.cc.NewStream(ctx, &Counter_ServiceDesc.Streams[2], "/Counter/CountAndRespond", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterCountAndRespondClient{stream}
	return x, nil
}

type Counter_CountAndRespondClient interface {
	Send(*CounterRequest) error
	Recv() (*CounterReply, error)
	grpc.ClientStream
}

type counterCountAndRespondClient struct {
	grpc.ClientStream
}

func (x *counterCountAndRespondClient) Send(m *CounterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *counterCountAndRespondClient) Recv() (*CounterReply, error) {
	m := new(CounterReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CounterServer is the server API for Counter service.
// All implementations must embed UnimplementedCounterServer
// for forward compatibility
type CounterServer interface {
	// Increment count by 1
	IncrementCount(context.Context, *emptypb.Empty) (*CounterReply, error)
	// Increment count through client stream of multiple counts
	AccumulateCount(Counter_AccumulateCountServer) error
	// Countdown with server stream
	Countdown(*emptypb.Empty, Counter_CountdownServer) error
	CountAndRespond(Counter_CountAndRespondServer) error
	mustEmbedUnimplementedCounterServer()
}

// UnimplementedCounterServer must be embedded to have forward compatible implementations.
type UnimplementedCounterServer struct {
}

func (UnimplementedCounterServer) IncrementCount(context.Context, *emptypb.Empty) (*CounterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncrementCount not implemented")
}
func (UnimplementedCounterServer) AccumulateCount(Counter_AccumulateCountServer) error {
	return status.Errorf(codes.Unimplemented, "method AccumulateCount not implemented")
}
func (UnimplementedCounterServer) Countdown(*emptypb.Empty, Counter_CountdownServer) error {
	return status.Errorf(codes.Unimplemented, "method Countdown not implemented")
}
func (UnimplementedCounterServer) CountAndRespond(Counter_CountAndRespondServer) error {
	return status.Errorf(codes.Unimplemented, "method CountAndRespond not implemented")
}
func (UnimplementedCounterServer) mustEmbedUnimplementedCounterServer() {}

// UnsafeCounterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CounterServer will
// result in compilation errors.
type UnsafeCounterServer interface {
	mustEmbedUnimplementedCounterServer()
}

func RegisterCounterServer(s grpc.ServiceRegistrar, srv CounterServer) {
	s.RegisterService(&Counter_ServiceDesc, srv)
}

func _Counter_IncrementCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CounterServer).IncrementCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Counter/IncrementCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CounterServer).IncrementCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Counter_AccumulateCount_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CounterServer).AccumulateCount(&counterAccumulateCountServer{stream})
}

type Counter_AccumulateCountServer interface {
	SendAndClose(*CounterReply) error
	Recv() (*CounterRequest, error)
	grpc.ServerStream
}

type counterAccumulateCountServer struct {
	grpc.ServerStream
}

func (x *counterAccumulateCountServer) SendAndClose(m *CounterReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *counterAccumulateCountServer) Recv() (*CounterRequest, error) {
	m := new(CounterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Counter_Countdown_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CounterServer).Countdown(m, &counterCountdownServer{stream})
}

type Counter_CountdownServer interface {
	Send(*CounterReply) error
	grpc.ServerStream
}

type counterCountdownServer struct {
	grpc.ServerStream
}

func (x *counterCountdownServer) Send(m *CounterReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Counter_CountAndRespond_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CounterServer).CountAndRespond(&counterCountAndRespondServer{stream})
}

type Counter_CountAndRespondServer interface {
	Send(*CounterReply) error
	Recv() (*CounterRequest, error)
	grpc.ServerStream
}

type counterCountAndRespondServer struct {
	grpc.ServerStream
}

func (x *counterCountAndRespondServer) Send(m *CounterReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *counterCountAndRespondServer) Recv() (*CounterRequest, error) {
	m := new(CounterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Counter_ServiceDesc is the grpc.ServiceDesc for Counter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Counter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Counter",
	HandlerType: (*CounterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncrementCount",
			Handler:    _Counter_IncrementCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AccumulateCount",
			Handler:       _Counter_AccumulateCount_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Countdown",
			Handler:       _Counter_Countdown_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CountAndRespond",
			Handler:       _Counter_CountAndRespond_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/count.proto",
}
